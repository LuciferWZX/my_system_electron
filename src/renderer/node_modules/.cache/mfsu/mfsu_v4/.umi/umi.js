import "./core/polyfill";
import "/Users/wuzhixin/Desktop/workspace/my_system_electron/src/renderer/global.less";
import { renderClient } from "/Users/wuzhixin/Desktop/workspace/my_system_electron/node_modules/.pnpm/registry.npmmirror.com+@umijs+renderer-react@4.0.36_ef5jwxihqo6n7gxfmzogljlgcm/node_modules/@umijs/renderer-react";
import { getRoutes } from "./core/route";
import { createPluginManager } from "./core/plugin";
import { createHistory } from "./core/history";
import { ApplyPluginsType } from "umi";
const publicPath = "/";
const runtimePublicPath = false;
async function render() {
  const pluginManager = createPluginManager();
  const { routes, routeComponents } = await getRoutes(pluginManager);
  await pluginManager.applyPlugins({
    key: "patchRoutes",
    type: ApplyPluginsType.event,
    args: {
      routes,
      routeComponents
    }
  });
  const contextOpts = pluginManager.applyPlugins({
    key: "modifyContextOpts",
    type: ApplyPluginsType.modify,
    initialValue: {}
  });
  const basename = contextOpts.basename || "/";
  const history = createHistory({
    type: contextOpts.historyType || "hash",
    basename,
    ...contextOpts.historyOpts
  });
  return pluginManager.applyPlugins({
    key: "render",
    type: ApplyPluginsType.compose,
    initialValue() {
      const context = {
        routes,
        routeComponents,
        pluginManager,
        rootElement: contextOpts.rootElement || document.getElementById("root"),
        publicPath,
        runtimePublicPath,
        history,
        basename,
        callback: contextOpts.callback
      };
      const modifiedContext = pluginManager.applyPlugins({
        key: "modifyClientRenderOpts",
        type: ApplyPluginsType.modify,
        initialValue: context
      });
      return renderClient(modifiedContext);
    }
  })();
}
render();
window.g_umi = {
  version: "4.0.36"
};
