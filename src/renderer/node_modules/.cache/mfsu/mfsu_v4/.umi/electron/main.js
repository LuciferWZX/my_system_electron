"use strict";
const electron = require("electron");
const path = require("path");
const url = require("url");
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const path__namespace = /* @__PURE__ */ _interopNamespace(path);
const createProtocol = (scheme) => {
  electron.protocol.registerFileProtocol(scheme, (request, respond) => {
    let pathName = new url.URL(request.url).pathname;
    pathName = decodeURI(pathName);
    const filePath = path__namespace.join(__dirname, pathName);
    respond({ path: filePath });
  });
};
const isDevelopment = true;
let mainWindow;
electron.protocol.registerSchemesAsPrivileged([
  { scheme: "app", privileges: { secure: true, standard: true } }
]);
function createWindow() {
  mainWindow = new electron.BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      contextIsolation: true,
      preload: path__namespace.join(__dirname, "preload.js")
    }
  });
  if (isDevelopment) {
    mainWindow.loadURL("http://localhost:8000");
    mainWindow.webContents.openDevTools();
  } else {
    createProtocol("app");
    mainWindow.loadURL("app://./index.html");
  }
}
electron.app.on("ready", async () => {
  createWindow();
});
electron.app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    electron.app.quit();
  }
});
electron.app.on("activate", () => {
  if (mainWindow === null) {
    createWindow();
  }
});
